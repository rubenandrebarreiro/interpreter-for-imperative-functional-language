PARSER_BEGIN(InterpreterParser)

package interpreter.parser;

import abstractsyntaxtree.scopes.Environment;
import abstractsyntaxtree.node.*;
import abstractsyntaxtree.node.associations.*;
import abstractsyntaxtree.node.arithmetic.*;
import abstractsyntaxtree.node.atomic.*;

/** ID lister. */
public class InterpreterParser {

	/** Main entry point. */
  	public static void main(String args[]) {
  	  	Environment env = new Environment();
    	InterpreterParser interpreterParser = new InterpreterParser(System.in);
    	ASTNode exp;

    	while (true) {
    		try {
    			exp = interpreterParser.Start();
    			System.out.println( exp.eval(env) );
    		}
    		catch (Exception e) {
    		    e.printStackTrace();
      			System.out.println ("Syntax Error!");
      			interpreterParser.ReInit(System.in);
    		}
    	}
  	}
}

PARSER_END(InterpreterParser)

SKIP :
{
  " "
| "\t"
| "\r"
}

TOKEN :
{
  < LET: "Let" >
  |
  < IN: "in" >
  |
  < END: "end" >
  | 
  < Id: ["a"-"z","A"-"Z"] ( ["a"-"z","A"-"Z","0"-"9"] )* >
  |
  < Num: (["0"-"9"]) + >
  |
  < PLUS : "+" >
  |
  < MINUS : "-">
  |
  < TIMES : "*">
  |
  < DIV : "/">
  |
  < LPAR : "(" >
  |
  < RPAR : ")" >
  |
  < EL: "\n" >
  |
  < EQUAL: "=" >
}

ASTNode Start():
{ ASTNode t; }
{
   t = Exp() <EL>
   { return t; }
}

ASTNode Exp() :
{ Token operation;
  ASTNode node1, node2; }
{
     node1 = Term() ( ( operation = <PLUS> | operation = <MINUS> ) node2 = Term() 
                 { if (operation.kind == PLUS) 
                         node1 = new ASTAdd(node1, node2);
                   else
                   		 node1 = new ASTSub(node1, node2);
                 } 
             ) *
     { return node1; } 
}

ASTNode Term() :
{ Token operation;
  ASTNode node1, node2;}
{
     node1 = Fact() ( ( operation = <TIMES> | operation = <DIV> ) node2 = Term()
				{ if (operation.kind == TIMES)
						node1 = new ASTMult(node1, node2);
				  else
				        node1 = new ASTDiv(node1, node2);	
				}
     		 )?
     { return node1; } 
}


ASTNode Fact() :
{ Token id, value, bodyExpression, num ; 
  ASTNode node;
  //ASTID id;
  }
{
   (    node = Let()
		| id = <Id> {
		  node = new ASTID(id.image);
		} 
		| num = <Num> { node = new ASTNum(Integer.parseInt(num.image)); }
		| <MINUS> { node = new ASTMult(new ASTNum(-1), node = Fact()); }
		| <LPAR> node = Exp() <RPAR> )
   { return node; }
}

ASTNode Let() :
{
  Token id, value, bodyExpression;
  ASTNode letNode, valueNode, expressionNode;
}
{
  
	(

//	<LET> id=<Id> {idNode = ID(id);} <EQUAL> value=<Id> <IN> expressionNode = Exp() <END>  
	  
	  < LET >
	  id = < Id >
      < EQUAL >
	  { valueNode = Exp();}
	  < IN >
	  expressionNode = Exp()
	  < END >
	  { letNode = new ASTLet(id.image, valueNode, expressionNode); }	)
	{ return letNode; }
}